{"version":3,"sources":["serviceWorker.js","components/header/header.js","components/Body/Body.js","components/Api/Api.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","useState","query","setQuery","className","type","onChange","e","currentTarget","value","placeholder","onClick","preventDefault","addQuery","BodyTable","pageNumber","setPageNumber","displayClass","setDisplayClass","flag","setFlag","pageSize","elements","firstIndex","lastIndex","data","length","i","push","getElements","map","index","key","src","artworkUrl100","alt","artistName","trackName","collectionName","primaryGenreName","addClass","href","collectionCensoredName","icon","faMusic","time","trackTimeMillis","Math","ceil","toFixed","trackCount","trackPrice","collectionPrice","initialPage","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selected","scroll","scrollToTop","containerClassName","subContainerClassName","activeClassName","instance","axios","baseURL","queryApi","get","then","response","App","setData","useEffect","results","Body","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7a772d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {useState} from 'react'\r\nimport \"./style.css\";\r\n\r\nconst Header = (props) => {\r\n    const [query, setQuery] = useState(0);\r\n    const onChange = (e) => {\r\n        setQuery(e.currentTarget.value)\r\n    };\r\n\r\n    const addItem = (e) => {\r\n        e.preventDefault();\r\n        props.addQuery(query)\r\n    }\r\n\r\n    return (\r\n        <div className={\"inputForm\"}>\r\n            <form>\r\n                <input type=\"text\" onChange={onChange} placeholder={\"Поиск артиста\"}/>\r\n                <button onClick={addItem}>поиск</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, {useState} from \"react\";\r\nimport \"./style.css\";\r\nimport ReactPaginate from 'react-paginate';\r\nimport {animateScroll as scroll} from 'react-scroll';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faMusic} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst BodyTable = (props) => {\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const [displayClass, setDisplayClass] = useState({});\r\n    const [flag, setFlag] = useState(true);\r\n\r\n    const tracktime = (time) => {\r\n        return Math.ceil(time / 60000).toFixed(2)\r\n    };\r\n\r\n    const addClass = (index) => {\r\n        setFlag(!flag);\r\n        setDisplayClass(index);\r\n\r\n    };\r\n\r\n    const getElements = (pageNumber, pageSize) => {\r\n        let elements = [];\r\n        let firstIndex = pageNumber * pageSize;\r\n        let lastIndex = pageNumber * pageSize + pageSize;\r\n        if (lastIndex >= props.data.length) lastIndex = props.data.length - 1;\r\n        for (let i = firstIndex; i <= lastIndex; i++) {\r\n            elements.push(props.data[i]);\r\n        }\r\n        return elements;\r\n    };\r\n\r\n    const handlePageClick = (data) => {\r\n        let selected = data.selected;\r\n        setPageNumber(selected);\r\n        scroll.scrollToTop();\r\n        setFlag(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"container tableBackground\">\r\n                    <div></div>\r\n                    <div>Artist</div>\r\n                    <div>Track</div>\r\n                    <div>Collection</div>\r\n                    <div>Genre</div>\r\n                    <div></div>\r\n                </div>\r\n                {\r\n                    getElements(pageNumber, 7).map((data, index) => {\r\n                        return (\r\n                            <div key={index} className=\"bodyTable\">\r\n                                <div className=\"container\">\r\n                                    <div><img src={data.artworkUrl100} alt=\"\"/></div>\r\n                                    <div>{data.artistName}</div>\r\n                                    <div>{data.trackName}</div>\r\n                                    <div>{data.collectionName}</div>\r\n                                    <div>{data.primaryGenreName}</div>\r\n                                    <div>\r\n                                        <button className={flag && displayClass === index ? \"closed\" : \"close\"}\r\n                                                onClick={() => {\r\n                                                    addClass(index);\r\n                                                }} href=\"#\"/>\r\n                                    </div>\r\n                                </div>\r\n                                <div className={flag && displayClass === index ? \"hidden\" : \"tableInfo\"}>\r\n                                    <div>\r\n                                        <div className=\"tableInfo-music\">\r\n                                            <div></div>\r\n                                            <h2>{data.collectionCensoredName}<FontAwesomeIcon icon={faMusic}/></h2>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"information\">\r\n                                        <div></div>\r\n                                        <div>Collection: {data.collectionName}</div>\r\n                                        <div>Track duration:{tracktime(data.trackTimeMillis)}</div>\r\n                                    </div>\r\n                                    <div className=\"information\">\r\n                                        <div></div>\r\n                                        <div>Track Count: {data.trackCount}</div>\r\n                                        <div>Track price: {data.trackPrice}</div>\r\n                                    </div>\r\n                                    <div className=\"information\">\r\n                                        <div></div>\r\n                                        <div>Price:{data.collectionPrice}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>)\r\n                    })\r\n                }\r\n                <div className={\"padginationStyle\"}>\r\n                    <ReactPaginate\r\n                        initialPage={0}\r\n                        previousLabel={'previous'}\r\n                        nextLabel={'next'}\r\n                        breakLabel={'...'}\r\n                        breakClassName={'break-me'}\r\n                        pageCount={props.data.length / 7}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={5}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'pagination'}\r\n                        subContainerClassName={'pages pagination'}\r\n                        activeClassName={'active'}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default BodyTable;","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://itunes.apple.com/'\r\n});\r\n\r\n\r\n\r\nexport const queryApi = {\r\n    getQuery(query) {\r\n        return instance.get(`search?term=${query}&entity=musicVideo`)\r\n            .then((response => {\r\n                return response;\r\n            }))\r\n    }\r\n};\r\n","import React, {useState, useEffect} from \"react\";\nimport Header from \"../header/header\";\nimport BodyTable from \"../Body/Body\";\nimport \"../Body/style.css\";\nimport {queryApi} from \"../Api/Api\";\n\n\nconst App = () => {\n    const [query, setQuery] = useState(' ');\n    const [data, setData] = useState([]);\n    const onSubmit = (value) => {\n        setQuery(value);\n    };\n\n    useEffect(() => {\n        queryApi.getQuery(query)\n            .then(response => {\n                setData(response.data.results);\n            })\n\n    }, [query]);\n\n\n    return (\n        <div>\n            <Header addQuery={onSubmit}/>\n            <BodyTable data={data}/>\n        </div>\n    )\n\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}